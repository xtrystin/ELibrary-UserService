// <auto-generated />
using System;
using ELibrary_UserService.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ELibrary_UserService.Infrastructure.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20230603125755_CreatesReactionAndReviewTables")]
    partial class CreatesReactionAndReviewTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("userService")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.Property<int>("WatchListId")
                        .HasColumnType("integer");

                    b.HasKey("UsersId", "WatchListId");

                    b.HasIndex("WatchListId");

                    b.ToTable("BookUser", "userService");
                });

            modelBuilder.Entity("ELibrary_UserService.Domain.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Book", "userService");
                });

            modelBuilder.Entity("ELibrary_UserService.Domain.Entity.Reaction", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("_like")
                        .HasColumnType("boolean")
                        .HasColumnName("Like");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reaction", "userService");
                });

            modelBuilder.Entity("ELibrary_UserService.Domain.Entity.Review", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("_content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Content");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", "userService");
                });

            modelBuilder.Entity("ELibrary_UserService.Domain.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("_amountToPay")
                        .HasColumnType("numeric")
                        .HasColumnName("AmountToPay");

                    b.Property<string>("_description")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("Description");

                    b.Property<string>("_firstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<bool>("_isAccountBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("IsAccountBlocked");

                    b.Property<string>("_lastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.HasKey("Id");

                    b.ToTable("User", "userService");
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("ELibrary_UserService.Domain.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELibrary_UserService.Domain.Entity.Book", null)
                        .WithMany()
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELibrary_UserService.Domain.Entity.Reaction", b =>
                {
                    b.HasOne("ELibrary_UserService.Domain.Entity.Book", "Book")
                        .WithMany("Reactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELibrary_UserService.Domain.Entity.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELibrary_UserService.Domain.Entity.Review", b =>
                {
                    b.HasOne("ELibrary_UserService.Domain.Entity.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELibrary_UserService.Domain.Entity.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELibrary_UserService.Domain.Entity.Book", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ELibrary_UserService.Domain.Entity.User", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
